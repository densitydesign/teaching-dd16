"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = function (filename, regexps, root, extensions, suppressResolveWarning) {
	var redirectPair = regexps.find(function (_ref) {
		var _ref2 = _slicedToArray(_ref, 1),
		    regexp = _ref2[0];

		return regexp.test(filename);
	});

	if (redirectPair) {
		var _redirectPair = _slicedToArray(redirectPair, 2),
		    regexp = _redirectPair[0],
		    redirect = _redirectPair[1];

		// if redirect is of "different/path/$1.js" form


		if (/\$\d/.test(redirect)) {
			// "abs/path/to/path/lib.js".match(/path/(\w+).js$/)[0] -> "path/lib.js"
			// "path/lib.js".replace(/path/(\w+).js$/, "different/path/$1.js") -> "different/path/lib.js"
			// redirect = "different/path/lib.js"
			redirect = filename.match(regexp)[0].replace(regexp, redirect);
		}

		return {
			redirected: (0, _resolveNode2.default)(root, redirect, extensions, suppressResolveWarning),
			redirect: redirect
		};
	}

	return null;
};

var _resolveNode = require("./resolveNode");

var _resolveNode2 = _interopRequireDefault(_resolveNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }